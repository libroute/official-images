*** classify_image.py	2018-06-10 16:21:31.794738482 +0100
--- classify_image_stdin.py	2018-06-10 16:52:02.228212532 +0100
***************
*** 46,56 ****
  import tensorflow as tf
  
  FLAGS = None
! 
! # pylint: disable=line-too-long
! DATA_URL = 'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'
! # pylint: enable=line-too-long
! 
  
  class NodeLookup(object):
    """Converts integer node ID's to human readable labels."""
--- 46,52 ----
  import tensorflow as tf
  
  FLAGS = None
! MODEL_DIR = '/tmp/imagenet'
  
  class NodeLookup(object):
    """Converts integer node ID's to human readable labels."""
***************
*** 60,69 ****
                 uid_lookup_path=None):
      if not label_lookup_path:
        label_lookup_path = os.path.join(
!           FLAGS.model_dir, 'imagenet_2012_challenge_label_map_proto.pbtxt')
      if not uid_lookup_path:
        uid_lookup_path = os.path.join(
!           FLAGS.model_dir, 'imagenet_synset_to_human_label_map.txt')
      self.node_lookup = self.load(label_lookup_path, uid_lookup_path)
  
    def load(self, label_lookup_path, uid_lookup_path):
--- 56,65 ----
                 uid_lookup_path=None):
      if not label_lookup_path:
        label_lookup_path = os.path.join(
!           MODEL_DIR, 'imagenet_2012_challenge_label_map_proto.pbtxt')
      if not uid_lookup_path:
        uid_lookup_path = os.path.join(
!           MODEL_DIR, 'imagenet_synset_to_human_label_map.txt')
      self.node_lookup = self.load(label_lookup_path, uid_lookup_path)
  
    def load(self, label_lookup_path, uid_lookup_path):
***************
*** 121,133 ****
    """Creates a graph from saved GraphDef file and returns a saver."""
    # Creates graph from saved graph_def.pb.
    with tf.gfile.FastGFile(os.path.join(
!       FLAGS.model_dir, 'classify_image_graph_def.pb'), 'rb') as f:
      graph_def = tf.GraphDef()
      graph_def.ParseFromString(f.read())
      _ = tf.import_graph_def(graph_def, name='')
  
  
! def run_inference_on_image(image):
    """Runs inference on an image.
  
    Args:
--- 117,129 ----
    """Creates a graph from saved GraphDef file and returns a saver."""
    # Creates graph from saved graph_def.pb.
    with tf.gfile.FastGFile(os.path.join(
!       MODEL_DIR, 'classify_image_graph_def.pb'), 'rb') as f:
      graph_def = tf.GraphDef()
      graph_def.ParseFromString(f.read())
      _ = tf.import_graph_def(graph_def, name='')
  
  
! def run_inference_on_image():
    """Runs inference on an image.
  
    Args:
***************
*** 136,144 ****
    Returns:
      Nothing
    """
!   if not tf.gfile.Exists(image):
!     tf.logging.fatal('File does not exist %s', image)
!   image_data = tf.gfile.FastGFile(image, 'rb').read()
  
    # Creates graph from saved GraphDef.
    create_graph()
--- 132,138 ----
    Returns:
      Nothing
    """
!   image_data = sys.stdin.read()
  
    # Creates graph from saved GraphDef.
    create_graph()
***************
*** 167,196 ****
        print('%s (score = %.5f)' % (human_string, score))
  
  
- def maybe_download_and_extract():
-   """Download and extract model tar file."""
-   dest_directory = FLAGS.model_dir
-   if not os.path.exists(dest_directory):
-     os.makedirs(dest_directory)
-   filename = DATA_URL.split('/')[-1]
-   filepath = os.path.join(dest_directory, filename)
-   if not os.path.exists(filepath):
-     def _progress(count, block_size, total_size):
-       sys.stdout.write('\r>> Downloading %s %.1f%%' % (
-           filename, float(count * block_size) / float(total_size) * 100.0))
-       sys.stdout.flush()
-     filepath, _ = urllib.request.urlretrieve(DATA_URL, filepath, _progress)
-     print()
-     statinfo = os.stat(filepath)
-     print('Successfully downloaded', filename, statinfo.st_size, 'bytes.')
-   tarfile.open(filepath, 'r:gz').extractall(dest_directory)
- 
- 
  def main(_):
!   maybe_download_and_extract()
!   image = (FLAGS.image_file if FLAGS.image_file else
!            os.path.join(FLAGS.model_dir, 'cropped_panda.jpg'))
!   run_inference_on_image(image)
  
  
  if __name__ == '__main__':
--- 161,168 ----
        print('%s (score = %.5f)' % (human_string, score))
  
  
  def main(_):
!   run_inference_on_image()
  
  
  if __name__ == '__main__':
***************
*** 202,223 ****
    # imagenet_2012_challenge_label_map_proto.pbtxt:
    #   Text representation of a protocol buffer mapping a label to synset ID.
    parser.add_argument(
-       '--model_dir',
-       type=str,
-       default='/tmp/imagenet',
-       help="""\
-       Path to classify_image_graph_def.pb,
-       imagenet_synset_to_human_label_map.txt, and
-       imagenet_2012_challenge_label_map_proto.pbtxt.\
-       """
-   )
-   parser.add_argument(
-       '--image_file',
-       type=str,
-       default='',
-       help='Absolute path to image file.'
-   )
-   parser.add_argument(
        '--num_top_predictions',
        type=int,
        default=5,
--- 174,179 ----
